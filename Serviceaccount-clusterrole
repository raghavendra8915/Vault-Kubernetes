Service Account:
Since we want the vault server to have the required permissions of ‘system:auth-delegator’. A service account has been assigned to the pod.

Vault server requires certain extra Kubernetes permissions to do its operations. Therefore, a ClusterRole is required (with the appropriate permissions) to be assigned to a ServiceAccount via a ClusterRoleBinding.
Create a Service account:
    apiVersion: v1
    kind: ServiceAccount
    metadata: 
      name: vault-auht
      namespace: vault

once, we have service account yaml ready then we apply by using the below command:
   ---- kubectl apply -f serviceaccount.yaml 


Kubernetes by default has a ClusterRole created with the required permissions i.e. ‘system:auth-delegator‘ so it’s not required to be created again for this case. Service accounts and Role Binding are required to be created.
ClusterRole:
   apiVersion: rbac.authorization.k8s.io/v1
   kind: ClusterRoleBinding
   metadata:
     name: vault-server-binding
   roleRef:
     apiGroup: rbac.authorization.k8s.io
     kind: ClusterRole
     name: system:auth-delegator
   subjects:
   - kind: ServiceAccount
     name: vault-auth
     namespace: vault


once, we have yaml ready then we can apply "kubectl apply -f clusterrolebinding.yaml"
validate service account now has 'tokenreviews.create'
      "kubectl auth can-i --list --as=system:serviceaccount:vault:vault-auth"

Make sure we have utility for parsing json: 
       "sudo apt install -y jq"

get JWT token for Kubernetes service account & get CA cert for cluster & get kubernetes API endpoint.
       "token_reviewer_jwt=$(kubectl get secret vault-auth -n $vault_ns -o jsonpath='{.data.token}' | base64 -d)"

